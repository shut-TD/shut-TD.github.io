<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>shutTD</title>
        <subtitle>Cyber AD</subtitle>
        <icon>https://shut-td.github.io/images/favicon.ico</icon>
        <link>https://shut-td.github.io</link>
        <author>
          <name>shutTD</name>
        </author>
        <description>菜只因~</description>
        <language>zh-CN</language>
        <pubDate>Thu, 09 May 2024 16:50:14 +0800</pubDate>
        <lastBuildDate>Thu, 09 May 2024 16:50:14 +0800</lastBuildDate>
        <category term="ikun~" />
        <category term="UnTivirus" />
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
            <title>回调后门函数的探索</title>
            <link>https://shut-td.github.io/%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
            <category term="Web" scheme="https://shut-td.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8/" />
            <category term="Web" scheme="https://shut-td.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8/" />
            <pubDate>Thu, 09 May 2024 16:50:14 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;探索回调函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#探索回调函数&#34;&gt;#&lt;/a&gt; 探索回调函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有关回调函数做后门的利用已经是十分常见的了，以及关于部分回调函数后门如何使用也已经被重复讲过了，因此这篇文章的着重点主要还是放在给我一个函数如何去判断可以作为回调函数后门，以及如何能够自己去找到这样的函数并利用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先还是先讲讲个人对于回调函数的理解，无非就是参数位有一个能够是自定义函数名称或者 php 内置函数名称，有一个或多个其他参数位的参数作为回调函数的参数，所以回调函数有做后门的潜力就是能够控制一个函数以及传递给它的参数，并且该函数仅用名称就可以。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何判断该函数是回调函数后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何判断该函数是回调函数后门&#34;&gt;#&lt;/a&gt; 如何判断该函数是回调函数后门？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;先说结论：&lt;br /&gt;
1、有 callback&lt;br /&gt;
2、回调参数支持字符串类型&lt;br /&gt;
 3、该函数返回值支持字符串 / 数组类型 (有回显)&lt;br /&gt;
 如果满足以上三个特征，那么这个函数基本上就能作为回调函数后门，如何判断这三个特征？直接访问 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucGhwLm5ldC8=&#34;&gt;https://www.php.net/&lt;/span&gt; 搜索该函数，在这里我们举一个十分典型的案例：&lt;strong&gt;call_user_func&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/stDTVBuh.png&#34; alt=&#34;call_user_func.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/GtIeSOGw.png&#34; alt=&#34;call_user_func_return.png&#34; /&gt;&lt;br /&gt;
 其回调参数也发现没有做什么限制，并且该函数返回值是 mixed 也就是啥类型都可以，因此该函数就是回调函数后门。&lt;/p&gt;
&lt;p&gt;我们再来提一个不那么常见的函数，来进行观察：&lt;strong&gt;array_reduce&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/eZSC8ocT.png&#34; alt=&#34;array_reduce.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/GtIeSOGw.png&#34; alt=&#34;call_user_func_return.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现满足这些特征，因此这个函数也是一个回调函数后门，对于这些我们初步认定的回调函数后门，我们可以通过将参数位设置成可控的并进行调试，比如：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$func&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;func&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$cmd&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;cmd&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_reduce&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;],&lt;span class=&#34;variable&#34;&gt;$func&lt;/span&gt;,&lt;span class=&#34;variable&#34;&gt;$cmd&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/2LbJZHfG.png&#34; alt=&#34;array_reduce_poc.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在我们对比一下虽然满足有 callback，但不是回调函数后门，这里举一个例子：&lt;strong&gt;usort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/sulrHR0P.png&#34; alt=&#34;usort.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2.imgtp.com/2024/05/09/cv9Pyk6G.png&#34; alt=&#34;usort_return.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以很明显的发现，该函数的返回值固定为 true 那肯定无法直接将命令回显出来，所以这并不是回调函数后门。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;相信看完这几个函数的详细对比，你已经掌握了基本的如何去寻找或者判断一个回调函数后门了，这里需要注意的是这里并没有考虑非回显以及嵌套回调的情况因此可能会出现误解，还是自行仔细研究，我仅仅只做牵引的效果，这里贴几个回调函数进行测试 (以下都是可直接回显的回调后门函数)。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;array_filter:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = [&lt;span class=&#34;string&#34;&gt;&amp;quot;whoami&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_filter&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = [&lt;span class=&#34;string&#34;&gt;&amp;quot;whoami&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_map&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array_intersect_ukey:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;whoami&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_intersect_ukey&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt;,[&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array_diff_uassoc:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;whoami&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_diff_uassoc&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt;,[&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array_diff_ukey:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;whoami&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;array_diff_ukey&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt;,[&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/CMD%E5%91%BD%E4%BB%A4%E6%B7%B7%E6%B7%86/</guid>
            <title>CMD命令混淆</title>
            <link>https://shut-td.github.io/CMD%E5%91%BD%E4%BB%A4%E6%B7%B7%E6%B7%86/</link>
            <category term="攻防技巧" scheme="https://shut-td.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E5%B7%A7/" />
            <category term="攻防技巧" scheme="https://shut-td.github.io/tags/%E6%94%BB%E9%98%B2%E6%8A%80%E5%B7%A7/" />
            <pubDate>Wed, 03 Apr 2024 00:53:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h3&gt;
&lt;p&gt;当我们获取 shell 或者连接到远控时，直接执行高危操作会被拦截因此需要做命令上的混淆来达到静态免杀的效果。&lt;/p&gt;
&lt;h5 id=&#34;1-转义符号连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-转义符号连接&#34;&gt;#&lt;/a&gt; 1、转义符号连接&lt;/h5&gt;
&lt;p&gt;即在命令中通过填充  ^  该符号进行混淆&lt;br /&gt;
 &lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^o&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^am&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hoczg4gntcj30dk02pglk.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt; 注意这里一次只能用一个 ^ 进行连接&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-利用set设置变量并使用连续执行达到混淆效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-利用set设置变量并使用连续执行达到混淆效果&#34;&gt;#&lt;/a&gt; 2、利用 set 设置变量并使用 &amp;amp;&amp;amp; 连续执行达到混淆效果&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; gg=wh&amp;amp;&amp;amp;&lt;span class=&#34;built_in&#34;&gt;%gg&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;%oami&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;再加上&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; gg=&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;^&amp;amp;&amp;amp;&lt;span class=&#34;built_in&#34;&gt;%gg&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;%oa&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^mi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hocznijn5cj30ei023weh.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hocznwfke0j30fq02jdfu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;3-双引号包裹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-双引号包裹&#34;&gt;#&lt;/a&gt; 3、双引号包裹&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;wh&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;o&lt;span class=&#34;string&#34;&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;w&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;h^o&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;am^i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoczp72g9fj30c202swef.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hoczplami2j30dw02et8o.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;4-括号包裹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-括号包裹&#34;&gt;#&lt;/a&gt; 4、括号包裹&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;((((((whoami))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;混合有限只能中间和 ^ 配合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;((((((&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^o&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^a&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^m&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^i&lt;/span&gt;))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoczqr3468j30ea02et8p.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoczr5q7d6j30fg02kt8q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;5-unicode替换非通用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-unicode替换非通用&#34;&gt;#&lt;/a&gt; 5、Unicode 替换 (非通用)&lt;/h5&gt;
&lt;p&gt;ʱ ʰ ʲ ʳ ʷ ʸ ˢ ˣ ˡ&lt;br /&gt;
ʷ 修饰字母小写 W&lt;br /&gt;
ʸ 修饰字母小写 Y&lt;br /&gt;
ʰ 修饰字母小写 H&lt;br /&gt;
ʱ 带钩的修饰字母小写 H&lt;br /&gt;
ʲ 修饰字母小写 J&lt;br /&gt;
ʳ 修饰字母小写 R&lt;br /&gt;
ˡ 修饰字母小写 L&lt;br /&gt;
ˢ 修饰字母小写 S&lt;br /&gt;
ˣ 修饰字母小写 X&lt;br /&gt;
 这个不太行，适用性太窄&lt;/p&gt;
&lt;p&gt;这也是我突发奇想试了将近半个多小时试出来总结出来的，结果上网一查早就有大佬总结好了 (emo 了～) 贴个链接把 ==&amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvbmV0d29yay8yOTEwMjAuaHRtbA==&#34;&gt;https://www.freebuf.com/articles/network/291020.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8F%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98-CS%E4%BA%8C%E5%BC%80%E7%B3%BB%E5%88%97/</guid>
            <title>源码反编译及搭建问题[CS二开系列]</title>
            <link>https://shut-td.github.io/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8F%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98-CS%E4%BA%8C%E5%BC%80%E7%B3%BB%E5%88%97/</link>
            <category term="安全工具开发" scheme="https://shut-td.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/" />
            <category term="安全工具开发" scheme="https://shut-td.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/" />
            <pubDate>Mon, 01 Apr 2024 02:35:14 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;源码的反编译及搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源码的反编译及搭建&#34;&gt;#&lt;/a&gt; 源码的反编译及搭建&lt;/h3&gt;
&lt;p&gt;我这里使用的是 jadx 进行的反编译，因此后面会有一些代码上的坑需要注意一下。&lt;br /&gt;
新建如下图的目录结构，并将原始的 CSjar 包放进 cs_bin 即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoaqyt5couj30me04874r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用 jadx 反编译完后导出为 graddle 项目至 cs_src 目录中即可获取源码即下图两个文件夹。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hoar1cl14pj30m8036mxd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后打开 IDEA 新建一个空项目并新建一个 decompiled_src 目录，并将 source 目录复制入 decompiled_src 即可，后续操作参考这篇&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzM3ODUzMy5odG1s&#34;&gt;二开搭建&lt;/span&gt;的文章。&lt;/p&gt;
&lt;p&gt;在这里主要讲下可能是 jadx 反编译的问题导致的反编译后的源代码有些地方会出错需要手动更正一下，这里举几个例子：&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hoar8i6pgnj30mv0a0wg6.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这里报错的原型是这段代码：&lt;br /&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Map.Entry entry : &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.hooks.entrySet())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	.......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这里只需要跟进 &lt;code&gt;this.hooks.entrySet()&lt;/code&gt;  观察一下返回的类型是什么即可，比如这里跟进之后发现是个 Set 集合，在外面用 Set 集合封装一下在替换即可解决报错，需要注意的是泛型要对齐，再比如下图也是这样。&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoar8n7oogj30m20553ze.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;还有一种报错就是属性报错，跟进那个类里看一下最接近的属性是什么改成什么就行了，还有包括一些明显的逻辑上的错误比如从外面接了参数却使用另一个赋值为空的参数去比较：&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoarg84tvzj30xq09s3zo.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
错误原型为第二行多加了 &lt;code&gt;String text2 = &amp;quot;&amp;quot;&lt;/code&gt; ，并在 &lt;code&gt;sum += text.charAt(x)&lt;/code&gt;  这段代码变成了 &lt;code&gt;sum += text2.charAt(x)&lt;/code&gt;  修正过来即可，反正这类逻辑上的代码问题还是稍微注意一下就行。&lt;/p&gt;
&lt;p&gt;至此环境基本搭建完成，可以启动 Agressor 端进行相关例如 UI 的修改以及相关功能的二开了&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BD%8D-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B-To-Future/</guid>
            <title>自我定位 &amp; 未来展望 To Future~</title>
            <link>https://shut-td.github.io/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BD%8D-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B-To-Future/</link>
            <pubDate>Fri, 15 Mar 2024 13:24:48 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;自我定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我定位&#34;&gt;#&lt;/a&gt; 自我定位&lt;/h3&gt;
&lt;p&gt;不多说上图&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hnrmbqbnrvj30q40q475r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前算是多方面发育吧，正在学习有关内核、驱动、逆向以及代审有关的知识。&lt;/li&gt;
&lt;li&gt;现在的想法主要还是朝着代码审计和安全开发走吧，目标暂时就是试着二开或者直接自研一整套 C2，审一审比较大的开源框架吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来展望-to-future~&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#未来展望-to-future~&#34;&gt;#&lt;/a&gt; 未来展望 To Future~&lt;/h3&gt;
&lt;p&gt;可能更想去安全研究 / 实验室 / 攻防的岗位吧🙌&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E6%84%8F%E5%A4%96%E7%9A%84Kernel32%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80/</guid>
            <title>意外的Kernel32基址寻址</title>
            <link>https://shut-td.github.io/%E6%84%8F%E5%A4%96%E7%9A%84Kernel32%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80/</link>
            <category term="Pwn" scheme="https://shut-td.github.io/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/" />
            <category term="Pwn" scheme="https://shut-td.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/" />
            <pubDate>Fri, 15 Mar 2024 11:03:18 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在PE文件结构中有个十分重要的东西，也是杀软进行静态分析时常死盯着的，那就是我们的导入表(Import Directory)，内含了该文件运行时调用的DLL文件以及导出函数。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnrid6mj92j31cx0tmgu8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果我们编写脚本时使用Windows库内自带的API，那么这些DLL文件以及包含在内的导出函数便会一览无余得暴露出来，所以我们需要将这些都隐藏掉实现导入表隐藏。如何实现最重要的一步就是通过PEB找到我们的Kernel32基址。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;windbg调试中遇到的问题与解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windbg调试中遇到的问题与解决&#34;&gt;#&lt;/a&gt; Windbg 调试中遇到的问题与解决&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Windbg的使用及安装教程网上资料很多就不多说了，主要提一下在调试时遇到的几个问题。
1、在附加进程时出现错误，先尝试以管理员权限启动Windbg再附加，若仍然报错则直接File-&amp;gt;Open Executable File直接启动任意一个可执行文件也是可以进行调试的，和附加是一样的。
2、调试过程中发生错误 Symbol _PEB 不存在等等之类的，在符号搜索路径(Symbol File Path Search)中添加路径：SRV*c:\mysymbol* http://msdl.microsoft.com/download/symbols 即可。
3、查询至InloadOrderMudleList中的Flink，Blink双向链表时其地址为 ??? ，这是操作系统对内核数据结构的保护进行的隐藏，我分别在Win10，Win10(虚拟机)，Win11三台机器上操作发现只有Win10(虚拟机)进行了字段隐藏，只显示 ???，这个问题我也不知道怎么解决，看情况应该是只有虚拟机会出现，还望懂的大佬能帮一手。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hnriy3p62qj30pf0a4q3t.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnrjm8yshdj30nq09y409.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;kernel32基址寻址的两条路线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kernel32基址寻址的两条路线&#34;&gt;#&lt;/a&gt; Kernel32 基址寻址的两条路线&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;如何使用Windbg在PEB寻找到kernel32基址这里不展开说了有很多相关的文章可以看，这里主要的内容是我在调试寻址过程中发现的一些问题。
第一条路线：这是最常见的一条即通过InloadOrderMudleList:Flink这条链一直往下跟就能找到Kernel32的DllBase，汇编代码：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;fs&lt;/span&gt;:[&lt;span class=&#34;number&#34;&gt;0x30&lt;/span&gt;]     //找PEB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]  //获取Ldr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]  //获取InloadOrderMudleList:Flink&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]         //获取InloadOrderLinks:Flink =&amp;gt; xxx&lt;span class=&#34;number&#34;&gt;.&lt;/span&gt;exe&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]         //获取InloadOrderLinks:Flink =&amp;gt; ntdll&lt;span class=&#34;number&#34;&gt;.&lt;/span&gt;dll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x18&lt;/span&gt;]  //获取kernel32 DLLBase也就是基地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; dwKernel32Addr, &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第二条路线：在最先开始研究的时候我以为这条路线就是第一条路线，但随着调试的过程中发现这地址不对啊！我还以为是操作系统造成的区别导致地址不一，但是我运行了这两段代码都成功指向同一个地址也就是我们的 Kernel32 的基址&lt;br /&gt;
 &lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;fs&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;0x30&lt;/span&gt;]      //找到PEB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]    //找LDR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x14&lt;/span&gt;]    //InMemoryOrderModuleList:Flink&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]           //InLoadOrderLinks:&lt;span class=&#34;string&#34;&gt;&amp;quot;shellcode.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]           //InLoadOrderLinks:&lt;span class=&#34;string&#34;&gt;&amp;quot;ntdll.dll&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x10&lt;/span&gt;]    //InInitializationOrderLinks:Flink =&amp;gt; DllBase&lt;span class=&#34;string&#34;&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; dwKernel32Addr, &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 仔细观察上述两段寻址汇编会发现除了获取 Ldr 内的 MudleList 不同和最后不同，其他找的步骤都是一样，那我们看看两条路线在 Windbg 中最后分别是什么&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnrkh9hfh8j30yy07twgy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnrkhb2uquj30wn07vdhu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;可以很明显看到这两个字段都指向了0x76fd0000，但是后面为什么InInitializationOrderLinks:Flink的地址就是Kernel32基址而不是DLLBase呢？根据网上众多资料收集来的信息来看可能是因为版本的原因造成的，其真正的基址需要在DllBase的地址上回滚8个字节(也就是图中从 0x18 ==&amp;gt; 0x10)，所以才变成了Flink的地址。其中Ldr内三个模块都能找到Kernel32基址(除了上述两条还有InInitializationOrderModuleList)，只不过现在只有第一条路线是不需要回滚字节的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hnrkqcctmbj30x30cftbx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至于要回滚字节的背后的底层原因我也不是很清楚，还请知道的大佬教教～～&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E7%BB%99EXE%E4%B8%8A%E9%94%81/</guid>
            <title>给EXE上锁</title>
            <link>https://shut-td.github.io/%E7%BB%99EXE%E4%B8%8A%E9%94%81/</link>
            <category term="免杀" scheme="https://shut-td.github.io/categories/untiVirus/" />
            <category term="免杀" scheme="https://shut-td.github.io/tags/untiVirus/" />
            <pubDate>Thu, 14 Mar 2024 18:15:25 +0800</pubDate>
            <description><![CDATA[ &lt;pre&gt;&lt;code&gt;在免杀中我们常常会用各种加密手段将shellcode进行变形以达到绕过杀软的静态检测分析，比如说最常见的异或，base64编码，aes，rsa，ecc等，当然静态查杀并不是我们主要要解决的，因为静态查杀是最容易绕过的基本上用异或就可以解决，今天我们的主题是绕过杀软的动态查杀。
先说说我认为的杀软查杀恶意文件的方法吧，第一种就是静态查杀，只通过搜索其有无恶意软件的静态特征进行查杀，这种是最容易绕过的基本上对恶意代码进行简单的变形就可以绕过了；第二种就是动态查杀，即用一个沙箱去模拟执行你的文件看是否会执行到某些敏感操作上去；第三种是内存查杀和行为监控，这也是最为难绕过的，因为不管你shellcode在执行前是什么样的加载到内存中去就会现出原形从而被检查到，还有在你去执行命令时不可避免的会向外联地址发送数据，这其中的流量特征也是难以更改的因此很容易被捕捉到，这也就是有些我们可以上线但一执行命令就寄了的原因。
好，简单叙述完查杀原因，我们来步入今天的主题，如何轻松绕过第二种查杀。首先也是最为重要的一点，那就是我们的exe文件后面是可以跟参数的，举个例子：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;参数个数：%d&amp;quot;&lt;/span&gt;, argc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;第几个参数：%s-%s&amp;quot;&lt;/span&gt;, argv[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp2u9hz3j30vp0pjwfe.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到输出的参数，其中 argc 是命令行中参数个数 (包括了这个文件名)，其中 argv 中存储的是命令行中所有的参数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp2wjah4j30vn0plq4a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;既然可以跟参数取参数，那我们就可以像设置密码一样控制程序的流程，从而绕过某些检测机制。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InjectShellcode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Inject shellcode!!!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argc &amp;gt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((std::string)argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;InjectShellcode&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;Hello&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp2zdzbnj31bz0plt9l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp315am2j30y60plmyf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;最终效果如下：
火绒：可持续上线不会掉
360：可持续上线，可能长时间会掉
windef：可上线但执行不了命令(现在已经被标记了上不了线)
卡巴斯基：可过静态无法上线
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp35147bj31mf0mcwml.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp390367j31kp0koagt.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp3avk4jj30sg0qmju1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hnqp3dngo0j30s80lsacp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
